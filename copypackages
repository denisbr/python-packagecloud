#!/usr/bin/env python
"""Copy Packages from one repo to another"""

import argparse
import configparser
import shutil
import tempfile

from Packagecloud import create_package
from Packagecloud import download_package
from Packagecloud import get_all_packages


def configure():
    """Configure"""
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', required=True,
                        help='Config file')
    parser.add_argument('--srcrepo', required=True,
                        help='Source Repository')
    parser.add_argument('--destrepo', required=True,
                        help='Destination Repository')
    parser.add_argument('--interactive', action='store_true',
                        help='Interactive Mode')
    parser.add_argument('--distro', required=False,
                        help='Filter selection by distro')
    parser.add_argument('--version', required=False,
                        help='Filter selection by package version')
    parser.add_argument('--name', required=False,
                        help='Filter selection by package name')
    parser.add_argument('--type', required=False,
                        help='Filter selection by package type')
    parser.add_argument('--match', required=False,
                        help='Filter selection by filename substring match')
    parser.add_argument('--debug', action='store_true',
                        help='Print debug output')
    args = parser.parse_args()

    config = configparser.SafeConfigParser()
    config.read(args.config)

    token = config.get('packagecloud', 'token')
    http_scheme = config.get('packagecloud', 'http_scheme')
    api_domain = config.get('packagecloud', 'api_domain')
    api_version = config.get('packagecloud', 'api_version')

    conf = {
        'domain_base': '{}://{}:@{}'.format(
            http_scheme, token, api_domain),
        'url_base': '{}://{}:@{}/api/{}'.format(
            http_scheme, token, api_domain, api_version),
        'repouser': config.get('packagecloud', 'repo_user'),
        'srcrepo': args.srcrepo,
        'destrepo': args.destrepo,
        'debug': args.debug,
        'interactive': args.interactive,
        'distro': args.distro,
        'version': args.version,
        'name': args.name,
        'type': args.type,
        'match': args.match,
        'args': args
    }

    return conf


def copy_package(package, repouser, destrepo, config):
    """Download package to /tmp and then upload it"""
    dirpath = tempfile.mkdtemp()
    filename = download_package(package, dirpath, config)
    result = create_package(repouser, destrepo, filename,
                            package['distro_version'], config)
    shutil.rmtree(dirpath)
    return result


def main():
    """Main"""
    conf = configure()

    copycount = 0
    skpcount = 0
    errcount = 0
    packages = get_all_packages(conf['repouser'], conf['srcrepo'], conf)
    for package in packages:
        if conf['distro'] and not package['distro_version'] == conf['distro']:
            continue
        elif conf['version'] and not package['version'] == conf['version']:
            continue
        elif conf['name'] and not package['name'] == conf['name']:
            continue
        elif conf['type'] and not conf['type'] == package['type']:
            continue
        elif conf['match'] and not conf['match'] in package['filename']:
            continue

        print('Copy {:<45} {:<20} from {:>15}/{:<15} to {:>15}/{:<15} '.
              format(package['filename'], package['distro_version'],
                     conf['repouser'], conf['srcrepo'], conf['repouser'],
                     conf['destrepo']), end='')

        if conf['interactive']:
            copy = input("(y/N)? ").lower() == 'y'
        else:
            copy = True

        if copy:
            copyresult = copy_package(package, conf['repouser'],
                                      conf['destrepo'], conf)
            if copyresult:
                print('[OK]')
                copycount += 1
            else:
                print('[ERROR]')
                errcount += 1
        else:
            print('Skipped {}'.format(package['filename']))
            skpcount += 1

    print('-----------------------------------------')
    print('Total packages processed: ', (copycount + skpcount + errcount))
    print('Copied:   ', copycount)
    print('Skipped:  ', skpcount)
    print('Errors:   ', errcount)

main()
